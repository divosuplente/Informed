import { describe, it, expect } from 'vitest';
import { NavBarLinks, toggleActive } from './navbarlinks';
import { get } from 'svelte/store';

// Generated by CodiumAI

/*
Code Analysis

Objective:
The objective of the `toggleActive` function is to update the `active` property of a specific `NavBarLink` object in the `NavBarLinks` Svelte store to `true`, while setting all other `active` properties to `false`.

Inputs:
- `name`: a string representing the name of the `NavBarLink` object to be updated.

Flow:
1. The function receives a `name` input.
2. The `NavBarLinks` Svelte store is updated using the `update` method.
3. The `update` method takes a callback function that receives the current value of the store as an argument.
4. The callback function loops through each `NavBarLink` object in the array and sets its `active` property to `true` if its `name` property matches the input `name`, or to `false` otherwise.
5. The updated array of `NavBarLink` objects is returned.

Outputs:
- None (the function updates the `NavBarLinks` Svelte store in place).

Additional aspects:
- The `NavBarLinks` Svelte store is imported from the `svelte/store` library.
- The `NavBarLinks` store is initialized with an array of `NavBarLink` objects, each containing a `link`, `name`, and `active` property.
- The `NavBarLinks` store is exported for use in other parts of the application.
*/

describe('toggleActive_function', () => {
	// Tests toggling active state of a link that exists in the NavBarLinks array.
	it('test_toggle_active_with_existing_link', () => {
		// Given
		const linkName = 'Portfolio';
		const expectedLinks = [
			{
				link: '/',
				name: 'Home',
				active: false
			},
			{
				link: '/portfolio',
				name: 'Portfolio',
				active: true
			},
			{
				link: '/library',
				name: 'Library',
				active: false
			},
			{
				link: '/aboutus',
				name: 'About us',
				active: false
			},
			{
				link: '/contact',
				name: 'Contact',
				active: false
			}
		];

		// When
		toggleActive(linkName);

		// Then
		expect(get(NavBarLinks)).toEqual(expectedLinks);
	});

	// Tests toggling active state of a link that does not exist in the NavBarLinks array.
	it('test_toggle_active_with_non_existing_link', () => {
		// Given
		const linkName = 'Non-existing Link';
		const expectedLinks = [
			{
				link: '/',
				name: 'Home',
				active: false
			},
			{
				link: '/portfolio',
				name: 'Portfolio',
				active: false
			},
			{
				link: '/library',
				name: 'Library',
				active: false
			},
			{
				link: '/aboutus',
				name: 'About us',
				active: false
			},
			{
				link: '/contact',
				name: 'Contact',
				active: false
			}
		];

		// When
		toggleActive(linkName);

		// Then
		expect(get(NavBarLinks)).toEqual(expectedLinks);
	});

	// Tests passing an empty string as the name parameter.
	it('test_toggle_active_with_empty_string', () => {
		// Given
		const linkName = '';
		const expectedLinks = [
			{
				link: '/',
				name: 'Home',
				active: false
			},
			{
				link: '/portfolio',
				name: 'Portfolio',
				active: false
			},
			{
				link: '/library',
				name: 'Library',
				active: false
			},
			{
				link: '/aboutus',
				name: 'About us',
				active: false
			},
			{
				link: '/contact',
				name: 'Contact',
				active: false
			}
		];

		// When
		toggleActive(linkName);

		// Then
		expect(get(NavBarLinks)).toEqual(expectedLinks);
	});
});
